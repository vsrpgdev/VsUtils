declare class Window_BattleLog extends Window_Base {
  private _lines: string[];
  private _methods: { name: string; params: any[] }[];
  private _waitCount: number;
  private _waitMode: string;
  private _baseLineStack: number[];
  private _spriteset: Spriteset_Battle | null;

  constructor(rect: Rectangle);

  initialize(rect: Rectangle): void;
  setSpriteset(spriteset: Spriteset_Battle): void;
  maxLines(): number;
  numLines(): number;
  messageSpeed(): number;
  isBusy(): boolean;
  update(): void;
  updateWait(): boolean;
  updateWaitCount(): boolean;
  updateWaitMode(): boolean;
  setWaitMode(waitMode: string): void;
  callNextMethod(): void;
  isFastForward(): boolean;
  push(methodName: string, ...params: any[]): void;
  clear(): void;
  wait(): void;
  waitForEffect(): void;
  waitForMovement(): void;
  addText(text: string): void;
  pushBaseLine(): void;
  popBaseLine(): void;
  waitForNewLine(): void;
  popupDamage(target: Game_Battler): void;
  performActionStart(subject: Game_Battler, action: Game_Action): void;
  performAction(subject: Game_Battler, action: Game_Action): void;
  performActionEnd(subject: Game_Battler): void;
  performDamage(target: Game_Battler): void;
  performMiss(target: Game_Battler): void;
  performRecovery(target: Game_Battler): void;
  performEvasion(target: Game_Battler): void;
  performMagicEvasion(target: Game_Battler): void;
  performCounter(target: Game_Battler): void;
  performReflection(target: Game_Battler): void;
  performSubstitute(substitute: Game_Battler, target: Game_Battler): void;
  performCollapse(target: Game_Battler): void;
  showAnimation(subject: Game_Battler, targets: Game_Battler[], animationId: number): void;
  showAttackAnimation(subject: Game_Battler, targets: Game_Battler[]): void;
  showActorAttackAnimation(subject: Game_Actor, targets: Game_Battler[]): void;
  showEnemyAttackAnimation(subject: Game_Enemy, targets: Game_Battler[]): void;
  showNormalAnimation(targets: Game_Battler[], animationId: number, mirror?: boolean): void;
  refresh(): void;
  drawBackground(): void;
  backRect(): Rectangle;
  lineRect(index: number): Rectangle;
  backColor(): string;
  backPaintOpacity(): number;
  drawLineText(index: number): void;
  startTurn(): void;
  startAction(subject: Game_Battler, action: Game_Action, targets: Game_Battler[]): void;
  endAction(subject: Game_Battler): void;
  displayCurrentState(subject: Game_Battler): void;
  displayRegeneration(subject: Game_Battler): void;
  displayAction(subject: Game_Battler, item: RPG_Item): void;
  displayItemMessage(fmt: string, subject: Game_Battler, item: RPG_Item): void;
  displayCounter(target: Game_Battler): void;
  displayReflection(target: Game_Battler): void;
  displaySubstitute(substitute: Game_Battler, target: Game_Battler): void;
  displayActionResults(subject: Game_Battler, target: Game_Battler): void;
  displayFailure(target: Game_Battler): void;
  displayCritical(target: Game_Battler): void;
  displayDamage(target: Game_Battler): void;
  displayMiss(target: Game_Battler): void;
  displayEvasion(target: Game_Battler): void;
  displayHpDamage(target: Game_Battler): void;
  displayMpDamage(target: Game_Battler): void;
  displayTpDamage(target: Game_Battler): void;
  displayAffectedStatus(target: Game_Battler): void;
  displayChangedStates(target: Game_Battler): void;
  displayAddedStates(target: Game_Battler): void;
  displayRemovedStates(target: Game_Battler): void;
  displayChangedBuffs(target: Game_Battler): void;
  displayBuffs(target: Game_Battler, buffs: number[], fmt: string): void;
  makeHpDamageText(target: Game_Battler): string;
  makeMpDamageText(target: Game_Battler): string;
  makeTpDamageText(target: Game_Battler): string;
}