declare class Window_Message extends Window_Base {
  private _background: number;
  private _positionType: number;
  private _waitCount: number;
  private _faceBitmap: Bitmap | null;
  private _textState: TextState | null;
  private _goldWindow: Window_Gold | null;
  private _nameBoxWindow: Window_NameBox | null;
  private _choiceListWindow: Window_ChoiceList | null;
  private _numberInputWindow: Window_NumberInput | null;
  private _eventItemWindow: Window_EventItem | null;

  constructor(rect: Rectangle);

  initialize(rect: Rectangle): void;
  initMembers(): void;
  setGoldWindow(goldWindow: Window_Gold): void;
  setNameBoxWindow(nameBoxWindow: Window_NameBox): void;
  setChoiceListWindow(choiceListWindow: Window_ChoiceList): void;
  setNumberInputWindow(numberInputWindow: Window_NumberInput): void;
  setEventItemWindow(eventItemWindow: Window_EventItem): void;
  clearFlags(): void;
  update(): void;
  checkToNotClose(): void;
  synchronizeNameBox(): void;
  canStart(): boolean;
  startMessage(): void;
  newLineX(textState: TextState): number;
  updatePlacement(): void;
  updateBackground(): void;
  terminateMessage(): void;
  updateWait(): boolean;
  cancelWait(): void;
  updateLoading(): boolean;
  updateInput(): boolean;
  isAnySubWindowActive(): boolean;
  updateMessage(): boolean;
  shouldBreakHere(textState: TextState): boolean;
  canBreakHere(textState: TextState): boolean;
  onEndOfText(): void;
  startInput(): boolean;
  isTriggered(): boolean;
  doesContinue(): boolean;
  areSettingsChanged(): boolean;
  updateShowFast(): void;
  newPage(textState: TextState): void;
  updateSpeakerName(): void;
  loadMessageFace(): void;
  drawMessageFace(): void;
  processControlCharacter(textState: TextState, c: string): void;
  processNewLine(textState: TextState): void;
  processNewPage(textState: TextState): void;
  isEndOfText(textState: TextState): boolean;
  needsNewPage(textState: TextState): boolean;
  processEscapeCharacter(code: string, textState: TextState): void;
  startWait(count: number): void;
  startPause(): void;
  isWaiting(): boolean;
}