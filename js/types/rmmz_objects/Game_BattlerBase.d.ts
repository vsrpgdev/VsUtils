declare class Game_BattlerBase {
  constructor();

  // Constants
  static TRAIT_ELEMENT_RATE: number;
  static TRAIT_DEBUFF_RATE: number;
  static TRAIT_STATE_RATE: number;
  static TRAIT_STATE_RESIST: number;
  static TRAIT_PARAM: number;
  static TRAIT_XPARAM: number;
  static TRAIT_SPARAM: number;
  static TRAIT_ATTACK_ELEMENT: number;
  static TRAIT_ATTACK_STATE: number;
  static TRAIT_ATTACK_SPEED: number;
  static TRAIT_ATTACK_TIMES: number;
  static TRAIT_ATTACK_SKILL: number;
  static TRAIT_STYPE_ADD: number;
  static TRAIT_STYPE_SEAL: number;
  static TRAIT_SKILL_ADD: number;
  static TRAIT_SKILL_SEAL: number;
  static TRAIT_EQUIP_WTYPE: number;
  static TRAIT_EQUIP_ATYPE: number;
  static TRAIT_EQUIP_LOCK: number;
  static TRAIT_EQUIP_SEAL: number;
  static TRAIT_SLOT_TYPE: number;
  static TRAIT_ACTION_PLUS: number;
  static TRAIT_SPECIAL_FLAG: number;
  static TRAIT_COLLAPSE_TYPE: number;
  static TRAIT_PARTY_ABILITY: number;
  static FLAG_ID_AUTO_BATTLE: number;
  static FLAG_ID_GUARD: number;
  static FLAG_ID_SUBSTITUTE: number;
  static FLAG_ID_PRESERVE_TP: number;
  static ICON_BUFF_START: number;
  static ICON_DEBUFF_START: number;

  // Properties
  hp: number;
  mp: number;
  tp: number;
  mhp: number;
  mmp: number;
  atk: number;
  def: number;
  mat: number;
  mdf: number;
  agi: number;
  luk: number;
  hit: number;
  eva: number;
  cri: number;
  cev: number;
  mev: number;
  mrf: number;
  cnt: number;
  hrg: number;
  mrg: number;
  trg: number;
  tgr: number;
  grd: number;
  rec: number;
  pha: number;
  mcr: number;
  tcr: number;
  pdr: number;
  mdr: number;
  fdr: number;
  exr: number;

  // Methods
  initialize(): void;
  initMembers(): void;
  clearParamPlus(): void;
  clearStates(): void;
  eraseState(stateId: number): void;
  isStateAffected(stateId: number): boolean;
  isDeathStateAffected(): boolean;
  deathStateId(): number;
  resetStateCounts(stateId: number): void;
  isStateExpired(stateId: number): boolean;
  updateStateTurns(): void;
  clearBuffs(): void;
  eraseBuff(paramId: number): void;
  buffLength(): number;
  buff(paramId: number): number;
  isBuffAffected(paramId: number): boolean;
  isDebuffAffected(paramId: number): boolean;
  isBuffOrDebuffAffected(paramId: number): boolean;
  isMaxBuffAffected(paramId: number): boolean;
  isMaxDebuffAffected(paramId: number): boolean;
  increaseBuff(paramId: number): void;
  decreaseBuff(paramId: number): void;
  overwriteBuffTurns(paramId: number, turns: number): void;
  isBuffExpired(paramId: number): boolean;
  updateBuffTurns(): void;
  die(): void;
  revive(): void;
  states(): rm.types.State[];
  stateIcons(): number[];
  buffIcons(): number[];
  buffIconIndex(buffLevel: number, paramId: number): number;
  allIcons(): number[];
  traitObjects(): any[];
  allTraits(): rm.types.Trait[];
  traits(code: number): rm.types.Trait[];
  traitsWithId(code: number, id: number): rm.types.Trait[];
  traitsPi(code: number, id: number): number;
  traitsSum(code: number, id: number): number;
  traitsSumAll(code: number): number;
  traitsSet(code: number): number[];
  paramBase(paramId: number): number;
  paramPlus(paramId: number): number;
  paramBasePlus(paramId: number): number;
  paramMin(paramId: number): number;
  paramMax(paramId: number): number;
  paramRate(paramId: number): number;
  paramBuffRate(paramId: number): number;
  param(paramId: number): number;
  xparam(xparamId: number): number;
  sparam(sparamId: number): number;
  elementRate(elementId: number): number;
  debuffRate(paramId: number): number;
  stateRate(stateId: number): number;
  stateResistSet(): number[];
  isStateResist(stateId: number): boolean;
  attackElements(): number[];
  attackStates(): number[];
  attackStatesRate(stateId: number): number;
  attackSpeed(): number;
  attackTimesAdd(): number;
  attackSkillId(): number;
  addedSkillTypes(): number[];
  isSkillTypeSealed(stypeId: number): boolean;
  addedSkills(): number[];
  isSkillSealed(skillId: number): boolean;
  isEquipWtypeOk(wtypeId: number): boolean;
  isEquipAtypeOk(atypeId: number): boolean;
  isEquipTypeLocked(etypeId: number): boolean;
  isEquipTypeSealed(etypeId: number): boolean;
  slotType(): number;
  isDualWield(): boolean;
  actionPlusSet(): number[];
  specialFlag(flagId: number): boolean;
  collapseType(): number;
  partyAbility(abilityId: number): boolean;
  isAutoBattle(): boolean;
  isGuard(): boolean;
  isSubstitute(): boolean;
  isPreserveTp(): boolean;
  addParam(paramId: number, value: number): void;
  setHp(hp: number): void;
  setMp(mp: number): void;
  setTp(tp: number): void;
  maxTp(): number;
  refresh(): void;
  recoverAll(): void;
  hpRate(): number;
  mpRate(): number;
  tpRate(): number;
  hide(): void;
  appear(): void;
  isHidden(): boolean;
  isAppeared(): boolean;
  isDead(): boolean;
  isAlive(): boolean;
  isDying(): boolean;
  isRestricted(): boolean;
  canInput(): boolean;
  canMove(): boolean;
  isConfused(): boolean;
  confusionLevel(): number;
  isActor(): boolean;
  isEnemy(): boolean;
  sortStates(): void;
  restriction(): number;
  addNewState(stateId: number): void;
  onRestrict(): void;
  mostImportantStateText(): string;
  stateMotionIndex(): number;
  stateOverlayIndex(): number;
  isSkillWtypeOk(skill: rm.types.Skill): boolean;
  skillMpCost(skill: rm.types.Skill): number;
  skillTpCost(skill: rm.types.Skill): number;
  canPaySkillCost(skill: rm.types.Skill): boolean;
  paySkillCost(skill: rm.types.Skill): void;
  isOccasionOk(item: rm.types.UsableItem): boolean;
  meetsUsableItemConditions(item: rm.types.UsableItem): boolean;
  meetsSkillConditions(skill: rm.types.Skill): boolean;
  meetsItemConditions(item: rm.types.Item): boolean;
  canUse(item: rm.types.UsableItem): boolean;
  canEquip(item: rm.types.EquipItem): boolean;
  canEquipWeapon(item: rm.types.EquipItem): boolean;
  canEquipArmor(item: rm.types.EquipItem): boolean;
  guardSkillId(): number;
  canAttack(): boolean;
  canGuard(): boolean;
}
